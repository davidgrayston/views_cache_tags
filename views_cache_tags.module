<?php

/**
 * @file
 * Views cache tags module.
 */

/**
 * Implements hook_views_api().
 */
function views_cache_tags_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_cache_tags') . '/views',
  );
}

/**
 * The CID for specified entity's cache tag.
 */
function _views_cache_tags_entity_cache_tag_cid($entity_id, $entity_type) {
  return 'views_cache_tag:' . $entity_type . ':' . intval($entity_id);
}

/**
 * Get the cache tag for specified entity.
 */
function views_cache_tags_entity_cache_tag($entity_id, $entity_type) {
  $cache = cache_get(_views_cache_tags_entity_cache_tag_cid($entity_id, $entity_type));
  if (isset($cache->data)) {
    return $cache->data;
  }

  return views_cache_tags_entity_cache_tag_reset($entity_id, $entity_type);
}

/**
 * Set cache tag for specified entity.
 */
function views_cache_tags_entity_cache_tag_reset($entity_id, $entity_type) {
  $cache_tag = 'views_cache_tag:' . $entity_type . ':' . intval($entity_id) . ':' . time();
  cache_set(_views_cache_tags_entity_cache_tag_cid($entity_id, $entity_type), $cache_tag);
  return $cache_tag;
}

/**
 * Implements hook_node_insert().
 */
function views_cache_tags_node_insert($node) {
  views_cache_tags_invalidate_cache($node);
}

/**
 * Implements hook_node_delete().
 */
function views_cache_tags_node_delete($node) {
  views_cache_tags_invalidate_cache($node);
}

/**
 * Implements hook_node_update().
 */
function views_cache_tags_node_update($node) {
  // Invalidate for the updated node.
  views_cache_tags_invalidate_cache($node);
  // Also invalidate the cache for the old version of the node.
  if (isset($node->original)) {
    views_cache_tags_invalidate_cache($node->original);
  }
}

/**
 * Invalidate caches.
 *
 * @param stdClass $node
 *   The node that requires cache invalidation.
 */
function views_cache_tags_invalidate_cache($node) {
  // Loop the term reference fields and reset the cache tags.
  $term_fields = _views_cache_tags_get_taxonomy_fields($node->type);
  foreach ($term_fields as $field_name => $field_info) {
    if (isset($node->{$field_name})) {
      // Reset the term cache tag.
      if (isset($node->{$field_name}[LANGUAGE_NONE][0])) {
        foreach ($node->{$field_name}[LANGUAGE_NONE] as $value) {
          views_cache_tags_entity_cache_tag_reset($value['tid'], 'taxonomy_term');
          // Also invalidate parent term tags.
          if ($parent_terms = taxonomy_get_parents_all($value['tid'])) {
            foreach ($parent_terms as $parent_term) {
              views_cache_tags_entity_cache_tag_reset($parent_term->tid, 'taxonomy_term');
            }
          }
        }
      }
    }
  }
}

/**
 * Helper to get list of term reference fields.
 *
 * @param string $node_type
 *   The node type.
 *
 * @return array
 *   List of term reference field names.
 */
function _views_cache_tags_get_taxonomy_fields($node_type) {
  $taxonomy_fields = &drupal_static(__FUNCTION__ . $node_type, array());
  if (!empty($taxonomy_fields[$node_type])) {
    return $taxonomy_fields[$node_type];
  }
  if ($entity_info = field_info_instances('node', $node_type)) {
    foreach ($entity_info as $field) {
      $field_name = $field['field_name'];
      $field_info = field_info_field($field_name);
      if ($field_info['type'] == 'taxonomy_term_reference') {
        $taxonomy_fields[$node_type][$field_name] = $field_info;
      }
    }
  }
  return $taxonomy_fields[$node_type];
}
