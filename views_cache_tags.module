<?php
/**
 * Implementation of hook_views_query_alter().
 */
function views_cache_tags_views_query_alter(&$view, &$query) {
  // Add cache tag comments to query.
  $cache_options = $view->display[$view->current_display]->handler->get_option('cache');

  if (isset($cache_options['results_lifespan']) && $cache_options['results_lifespan'] > 0) {
    $comments = array();
    if (isset($query->options['query_comment'])) {
      $comments[] = $query->options['query_comment'];
    }

    // Extract tids from query.
    $tids = array();
    $tids = array_merge($tids, _views_cache_tags_extract_tids_from_joins($query));
    $tids = array_merge($tids, _views_cache_tags_extract_tids_from_where($query));

    // Add tid cache tags to query to affect the query cache key.
    foreach (array_unique($tids) as $tid) {
      $comments[] = views_cache_tags_tid_cache_tag($tid);
    }

    $query->options['query_comment'] = implode(',', $comments);
  }
}

/**
 * Extract tids from joins.
 */
function _views_cache_tags_extract_tids_from_joins($query) {
  $tids = array();
  // Discover terms filtering this view.
  foreach ($query->table_queue as $alias => $info) {
    // Grab the tids from taxonomy_index joins.
    if (isset($info['table']) && $info['table'] == 'taxonomy_index') {
      if (isset($info['join']->extra)) {
        foreach ($info['join']->extra as $on_clause) {
          if (isset($on_clause['field']) && $on_clause['field'] == 'tid') {
            if (isset($on_clause['value'])) {
              if (is_array($on_clause['value'])) {
                $tids = array_merge($tids, $on_clause['value']);
              }
              else {
                $tids[] = $on_clause['value'];
              }
            }
          }
        }
      };
    }
  }
  return array_unique($tids);
}

/**
 * Extract tids from where clause.
 */
function _views_cache_tags_extract_tids_from_where($query) {
  $tids = array();
  if (isset($query->where)) {
    foreach ($query->where as $cond_items) {
      if (isset($cond_items['conditions']) && is_array($cond_items['conditions'])) {
        foreach ($cond_items['conditions'] as $cond) {
          if (isset($cond['field']) && substr($cond['field'], -3) == 'tid') {
            // Get tid from basic where clause.
            if (is_array($cond['value'])) {
              $tids = array_merge($tids, $cond['value']);
            }
            else {
              $tids[] = $cond['value'];
            }
          }
          elseif (isset($cond['field']) && substr($cond['field'], -3) == 'nid') {
            // Extract tids from node sub queries.
            if (is_object($cond['value']) && get_class($cond['value']) == 'SelectQuery') {
              $sq_cond_items = $cond['value']->conditions();
              foreach ($sq_cond_items as $sq_cond_item) {
                if (isset($sq_cond_item['field']) && is_object($sq_cond_item['field']) && get_class($sq_cond_item['field']) == 'DatabaseCondition') {
                  $sq_conds = $sq_cond_item['field']->conditions();
                  foreach ($sq_conds as $sq_cond) {
                    if (isset($sq_cond['field']) && substr($sq_cond['field'], -3) == 'tid') {
                      if (is_array($sq_cond['value'])) {
                        $tids = array_merge($tids, $sq_cond['value']);
                      }
                      else {
                        $tids[] = $sq_cond['value'];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return array_unique($tids);
}

/**
 * The CID for specified tids cache tag.
 */
function _views_cache_tags_tid_cache_tag_cid($tid) {
  return 'term_cache_tag_' . $tid;
}

/**
 * Get the cache tag for specified tid.
 */
function views_cache_tags_tid_cache_tag($tid) {
  $cache = cache_get(_views_cache_tags_tid_cache_tag_cid($tid));
  if (isset($cache->data)) {
    return $cache->data;
  }

  return views_cache_tags_tid_cache_tag_reset($tid);
}

/**
 * Set cache tag for specified tid.
 */
function views_cache_tags_tid_cache_tag_reset($tid) {
  $cache_tag = 'term_cache_tag_' . $tid . '_' . time();
  cache_set(_views_cache_tags_tid_cache_tag_cid($tid), $cache_tag);
  return $cache_tag;
}



/**
 * Implements hook_node_insert().
 *
 * @param $node
 */
function views_cache_tags_node_insert($node) {
  views_cache_tags_invalidate_cache($node);
}

/**
 * Implements hook_node_delete().
 *
 * @param $node
 */
function views_cache_tags_node_delete($node) {
  views_cache_tags_invalidate_cache($node);
}

/**
 * Implements hook_node_update().
 *
 * @param $node
 */
function views_cache_tags_node_update($node) {
  // Invalidate for the updated node.
  views_cache_tags_invalidate_cache($node);
  // Also invalidate the cache for the old version of the node.
  if (isset($node->original)) {
    views_cache_tags_invalidate_cache($node->original);
  }
}

/**
 * Invalidate caches.
 *
 * @param $node
 */
function views_cache_tags_invalidate_cache($node) {
  // Loop the term reference fields and reset the cache tags.
  $term_fields = _views_cache_tags_get_taxonomy_fields($node->type);
  foreach ($term_fields as $field_name => $field_info) {
    if (isset($node->{$field_name})) {
      // Reset the term cache tag.
      if (isset($node->{$field_name}[LANGUAGE_NONE][0])) {
        foreach ($node->{$field_name}[LANGUAGE_NONE] as $key => $value) {
          views_cache_tags_tid_cache_tag_reset($value['tid']);
          // Also invalidate parent term tags.
          if ($parent_terms = taxonomy_get_parents_all($value['tid'])) {
            foreach ($parent_terms as $parent_term) {
              views_cache_tags_tid_cache_tag_reset($parent_term->tid);
            }
          }
        }
      }
    }
  }
}


/**
 * Helper to get list of term reference fields.
 *
 * @param $node_type
 * The node type.
 * @return
 * List of term reference field names.
 */
function _views_cache_tags_get_taxonomy_fields($node_type) {
  $taxonomy_fields = &drupal_static(__FUNCTION__ . $node_type, array());
  if (!empty($taxonomy_fields[$node_type])) {
   return $taxonomy_fields[$node_type];
  }
  if ($entity_info = field_info_instances('node', $node_type)) {
    foreach ($entity_info as $field) {
      $field_name = $field['field_name'];
      $field_info = field_info_field($field_name);
      if ($field_info['type'] == 'taxonomy_term_reference') {
        $taxonomy_fields[$node_type][$field_name] = $field_info;
      }
    }
  }
  return $taxonomy_fields[$node_type];
}
